schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Item {
  id: ID!
  message: String
  payload: AWSJSON
  timestamp: AWSDateTime!
  type: String!
  userEmail: String!
  pinboardId: String!
  mentions: [String!]
}

type LastItemSeenByUser {
  pinboardId: String!
  userEmail: String!
  itemID: String!
  seenAt: AWSTimestamp!
}

type User {
  email: String!
  firstName: String!
  lastName: String!
  avatarUrl: String
  isMentionable: Boolean
}
type MyUser {
  email: String!
  firstName: String!
  lastName: String!
  avatarUrl: String
  hasWebPushSubscription: Boolean
  manuallyOpenedPinboardIds: [String!]
}

type WorkflowStub {
  id: String!
  title: String
  headline: String
  composerId: String
  status: String
  trashed: Boolean
  isNotFound: Boolean
}

type GridBadgeData {
  text: String!
  color: String!
}

type GridSearchQueryBreakdown {
  collections: [GridBadgeData!]
  labels: [GridBadgeData!]
  chips: [GridBadgeData!]
  restOfSearch: String
}

type GridSearchSummary {
  total: Int!
  thumbnails: [String!]!
  queryBreakdown: GridSearchQueryBreakdown
}

type UserConnection {
  items: [User]
  nextToken: String
}

type LastItemSeenByUserConnection {
  items: [LastItemSeenByUser]
  nextToken: String
}

type Mutation {
  createItem(input: CreateItemInput!): Item
  seenItem(input: LastItemSeenByUserInput!): LastItemSeenByUser
  setWebPushSubscriptionForUser(webPushSubscription: AWSJSON): MyUser
  addManuallyOpenedPinboardIds(ids: [String!]!, maybeEmailOverride: String): MyUser
  removeManuallyOpenedPinboardIds(ids: [String!]!): MyUser
}

type Query {
  listItems(pinboardId: String!): [Item]

  listLastItemSeenByUsers(
    filter: TableLastItemSeenByUserFilterInput
    limit: Int
    nextToken: String
  ): LastItemSeenByUserConnection

  getMyUser: MyUser

  listUsers(
    limit: Int
    nextToken: String
  ): UserConnection

  listPinboards(searchText: String): [WorkflowStub]
  getPinboardsByIds(ids: [String!]!): [WorkflowStub]
  getPinboardByComposerId(composerId: String!): WorkflowStub

  getGridSearchSummary(apiUrl: String!): GridSearchSummary
}

type Subscription {
  onCreateItem(
    pinboardId: String
  ): Item @aws_subscribe(mutations: ["createItem"])

  onSeenItem(
    pinboardId: String!
  ): LastItemSeenByUser @aws_subscribe(mutations: ["seenItem"])

  onManuallyOpenedPinboardIdsChanged(
    email: String! # unfortunately this can't be done via 'identity' in the resolver
  ): MyUser @aws_subscribe(mutations: ["addManuallyOpenedPinboardIds", "removeManuallyOpenedPinboardIds"])
}

input CreateItemInput {
  message: String
  payload: AWSJSON
  type: String!
  pinboardId: String!
  mentions: [String!]
}

input LastItemSeenByUserInput {
  pinboardId: String!
  itemID: String!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableLastItemSeenByUserFilterInput {
  pinboardId: TableStringFilterInput
}

input TableUserFilterInput {
  firstName: TableStringFilterInput
  lastName: TableStringFilterInput
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}
